QGIS Server OAUTH2 plugin
=========================

This is an highly experimental proof-of-concept plugin for *QGIS Server*
that protects the server using *OAuth2* for authorization (and delegated
authentication).

**SECURITY WARNING:**

The `access_token` is cached in-memory in the server plugin and does not
expire.

Token verification
------------------

Some OAuth providers also supports verification of `access_token` obtained
through another client, since the original specifications did not incude
this feature (this was added to the OAuth2 specs in a recent RFC:
https://tools.ietf.org/html/rfc7662) every provider handles this differently
by providing a custom endpoint to verify an existing token.


Currently supported Authorization Services
------------------------------------------

Generic OAuth 2
...............

The `base` provider is a generic OAuth 2 provider.

**Required configuration**:

* `OAUTH2_AUTHORIZATION_SERVICE_PROVIDER=base`
* `OAUTH2_CLIENT_ID=your_client_id`
* `OAUTH2_CLIENT_SECRET=your_secret`
* `OAUTH2_AUTHENTICATE_URL=https://your_oauth2_endpoint.com/authorize/`
* `OAUTH2_ACCESS_TOKEN_URL=https://your_oauth2_endpoint.com/oauth/token`
* `OAUTH2_SCOPE=your_scope`

Auth0 (OAuth 2)
.................

GitHub offers a *pure* implementation of **OAuth 2** and supports
**Authorization Code Grant** flow, the `access_token` is sent back to the
User-Agent in the query string and it's used as a session identifier.

Additionally, this provider supports verification of `access_token` obtained
through another client.

**Required configuration**:

* `OAUTH2_AUTHORIZATION_SERVICE_PROVIDER=auth0`
* `OAUTH2_CLIENT_ID=your_client_id`
* `OAUTH2_CLIENT_SECRET=your_secret`
* `OAUTH2_ACCESS_TOKEN_URL=https://your_account.auth0.com/oauth/token`
* `OAUTH2_AUTHENTICATE_URL=https://your_account.auth0.com/authorize/`
* `OAUTH2_VERIFY_URL=https://your_account.auth0.com/userinfo`


GithHub (OAuth 2)
.................

GitHub offers a *pure* implementation of **OAuth 2** and supports
**Authorization Code Grant** flow, the `access_token` is sent back to the
User-Agent in the query string and it's used as a session identifier.

Additionally, this provider supports verification of `access_token` obtained
through another client.

**Required configuration**:

* `OAUTH2_AUTHORIZATION_SERVICE_PROVIDER=github`
* `OAUTH2_CLIENT_ID=your_client_id`
* `OAUTH2_CLIENT_SECRET=your_secret`

Upstream docs: https://developer.github.com/v3/oauth/

Google (OAuth 2)
.................

Google also offers a *pure* implementation of **OAuth 2** and supports
**Authorization Code Grant** flow, the `access_token` is sent back to the
User-Agent in the query string and it's used as a session identifier..

Additionally, this provider supports verification of `access_token` obtained
through another client.


**Required configuration**:

* `OAUTH2_AUTHORIZATION_SERVICE_PROVIDER=google`
* `OAUTH2_CLIENT_ID=your_client_id`
* `OAUTH2_CLIENT_SECRET=your_secret`

.. warning::

    Pay attention to the the redirect URL (if testing, it will probably be
    `http://localhost:8081`), it must be registered in your Google API
    console https://console.developers.google.com/apis/credentials/oauthclient/
    In the Google API manager you need OAuth credentials of type "Web Application"


Twitter
.......

Twitter Authorization Service supports **Authorization Code Grant** flow, the
`access_token` is sent back to the User-Agent in the query string and it's
used as a session identifier.


**Required configuration**:

* `OAUTH2_CLIENT_ID=your_client_id`
* `OAUTH2_CLIENT_SECRE=your_secret`

For Twitter Authorization Services you'll need the client ID and the secret
generated by: https://apps.twitter.com/


Configuration
-------------

See the file `settings.py`.

The configuration variables can be set in the settings file, in an `.env` file
or passed from the environment.

.. warning::

    Other provider may need additional configuration, see notes in the provider section.

Installation
------------

If you just want to test this plugin, you can run QGIS Server from the console
and you do not need to install it in a running web server setup, see the next
paragraph for the details.

Some additional Python packages must be installed to run the plugin, see
the list of required packages in `requirements.txt` and install them
in your virtualenv with::

    pip install -r requirements.txt

In the main plugin folder you can also find a `paver` script that can do the
setup work automatically and download/install all required dependencies
and store them in an egg file in the `ext-libs` folder, if you choose this
installation method, you do not need to run `pip install` manually as explained
above.

To setup the plugin with paver, just run::

    paver setup



Testing
-------

A convenience wrapper script for QGIS Server is provided in the root directory
and can be used to debug the plugin.

Example run::

     OAUTH2_AUTHORIZATION_SERVICE_PROVIDER=github \
     OAUTH2_CLIENT_ID=***** \
     OAUTH2_CLIENT_SECRET=********* \
     QGIS_SERVER_LOG_FILE=/tmp/qgis.log \
     QGIS_SERVER_LOG_LEVEL=0 \
     python qgis_wrapped_server.py | tee | tail -f /tmp/qgis.log
